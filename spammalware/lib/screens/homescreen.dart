// ignore_for_file: prefer_const_constructors, prefer_const_literals_to_create_immutables, sort_child_properties_last
import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:csv/csv.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:path_provider/path_provider.dart';

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final TextEditingController _textController = TextEditingController();

  List<List<dynamic>> data = [];

  @override
  void initState() {
    super.initState();
    _loadCSV();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Spam & Malware Detection'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Expanded(
              child: StreamBuilder<List<List<dynamic>>>(
                stream: _csvStream(),
                builder: (context, snapshot) {
                  if (snapshot.hasData) {
                    return Column(
                      children: [
                        Expanded(
                          child: ListView.builder(
                            itemCount: snapshot.data!.length,
                            itemBuilder: (context, index) {
                              return ChatMessage(
                                  text: snapshot.data![index][2].toString(),
                                  isSender: snapshot.data![index][0] == 1
                                      ? true
                                      : false);
                            },
                          ),
                        ),
                        Container(
                          padding: EdgeInsets.all(8),
                          child: Row(
                            children: [
                              Expanded(
                                child: TextField(
                                  controller: _textController,
                                  onSubmitted: (value) {
                                    // appendToCSV();
                                  },
                                  decoration: InputDecoration(
                                    hintText: 'Type a message...',
                                  ),
                                ),
                              ),
                              IconButton(
                                icon: Icon(Icons.send),
                                onPressed: () {
                                  appendToCSV();
                                },
                              ),
                            ],
                          ),
                        )
                      ],
                    );
                  } else {
                    return Center(child: CircularProgressIndicator());
                  }
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _loadCSV() async {
    final directory = await getApplicationDocumentsDirectory();
    final filePath = "${directory.path}/db.csv";

    // Check if the file exists, if not, create an empty CSV file
    if (await File(filePath).exists()) {
      final raw = await File(filePath).readAsString();
      List<List<dynamic>> listData = const CsvToListConverter().convert(raw);
      setState(() {
        data = listData;
      });
    } else {
      await File(filePath).writeAsString('');
    }
  }

  Future<void> appendToCSV() async {
    final directory = await getApplicationDocumentsDirectory();
    final filePath = "${directory.path}/db.csv";

    // Read existing CSV data
    String raw;
    try {
      raw = await File(filePath).readAsString();
    } catch (e) {
      print("Error reading CSV file: $e");
      return;
    }

    List<List<dynamic>> csvTable = const CsvToListConverter().convert(raw);

    // Generate new row
    List<dynamic> newRow = [
      0,
      'txt',
      _textController.text, // Replace with your messageController.text
    ];

    // Append the new row
    csvTable.add(newRow);

    // Convert the updated data to CSV format
    String updatedCsvData = ListToCsvConverter().convert(csvTable);

    // Write the updated CSV data back to the file
    try {
      await File(filePath).writeAsString(updatedCsvData);
      print("CSV file updated successfully.");
    } catch (e) {
      print("Error writing CSV file: $e");
    }
  }

  Stream<List<List<dynamic>>> _csvStream() async* {
    final directory = await getApplicationDocumentsDirectory();
    final filePath = "${directory.path}/db.csv";

    while (true) {
      await Future.delayed(Duration(seconds: 1));

      try {
        final raw = await File(filePath).readAsString();
        List<List<dynamic>> listData = const CsvToListConverter().convert(raw);
        yield listData;
      } catch (e) {
        print("Error reading CSV file: $e");
        yield [];
      }
    }
  }
}

class ChatMessage extends StatelessWidget {
  final String text;
  final bool isSender;

  ChatMessage({required this.text, required this.isSender});

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.symmetric(vertical: 10, horizontal: 16),
      alignment: isSender ? Alignment.centerRight : Alignment.centerLeft,
      child: Row(
        mainAxisAlignment:
            isSender ? MainAxisAlignment.end : MainAxisAlignment.start,
        children: [
          isSender
              ? Image(
                  image: AssetImage('assets/shield.png'),
                )
              : Container(),
          Container(
            padding: EdgeInsets.all(10),
            decoration: BoxDecoration(
              color: isSender ? Colors.blue : Colors.grey[300],
              borderRadius: BorderRadius.circular(8),
            ),
            child: Text(
              text,
              style: TextStyle(fontSize: 16),
            ),
          ),
          !isSender
              ? Image(
                  image: AssetImage('assets/warning.png'),
                )
              : Container(),
        ],
      ),
    );
  }
}
