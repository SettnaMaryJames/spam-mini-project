// ignore_for_file: prefer_const_constructors, prefer_const_literals_to_create_immutables, sort_child_properties_last
import 'dart:convert';
import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:csv/csv.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:http/http.dart' as http;

import 'package:path_provider/path_provider.dart';

class HomeScreen extends StatefulWidget {
  bool isOn = true;

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final TextEditingController _textController = TextEditingController();

  List<List<dynamic>> data = [];

  @override
  void initState() {
    super.initState();
    _loadCSV();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Spam & Malware Detection'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Expanded(
              child: StreamBuilder<List<List<dynamic>>>(
                stream: _csvStream(),
                builder: (context, snapshot) {
                  if (snapshot.hasData) {
                    return Column(
                      children: [
                        Expanded(
                          child: ListView.builder(
                            itemCount: snapshot.data!.length,
                            itemBuilder: (context, index) {
                              // print('value is ${snapshot.data![index][3]}');
                              return ChatMessage(
                                text: snapshot.data![index][2].toString(),
                                isSender: snapshot.data![index][0] == 1
                                    ? true
                                    : false,
                                isSafe: snapshot.data![index][3] == 0
                                    ? true
                                    : false,
                              );
                            },
                          ),
                        ),
                        Container(
                          padding: EdgeInsets.all(8),
                          child: Row(
                            children: [
                              Container(
                                child: GestureDetector(
                                  onTap: () {
                                    setState(() {
                                      if (widget.isOn) {
                                        widget.isOn = false;
                                      } else {
                                        widget.isOn = true;
                                      }
                                    });
                                    final snackBar = SnackBar(
                                      content: Text(
                                          'Sending as ${widget.isOn ? "Sender" : "Reciever"}'),
                                    );
                                    ScaffoldMessenger.of(context)
                                        .showSnackBar(snackBar);
                                  },
                                  child: widget.isOn
                                      ? Icon(
                                          Icons.toggle_on_outlined,
                                          color: Colors.blue,
                                        )
                                      : Icon(
                                          Icons.toggle_off_outlined,
                                          color: Colors.grey,
                                        ),
                                ),
                              ),
                              Expanded(
                                child: TextField(
                                  controller: _textController,
                                  onSubmitted: (value) {
                                    // appendToCSV();
                                  },
                                  decoration: InputDecoration(
                                    hintText: 'Type a message...',
                                  ),
                                ),
                              ),
                              IconButton(
                                icon: Icon(Icons.send),
                                onPressed: () {
                                  checkMessage();
                                },
                              ),
                            ],
                          ),
                        )
                      ],
                    );
                  } else {
                    return Center(child: CircularProgressIndicator());
                  }
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  void checkMessage() async {
    bool result = true;
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return CommentDialog();
      },
    );
    print('calling query');
    print(_textController.text);
    String url = 'http://10.0.2.2:5000/api?query=${_textController.text}';
    try {
      final res = await http.get(Uri.parse(url));
      print('result from erb is is ${result}');
      print(jsonDecode(res.body));
      result = jsonDecode(res.body) == '1' ? true : false;
    } catch (e) {
      print(e);
    }
    print('final result is ${result}');
    if (result) {
      appendToCSV(widget.isOn ? 1 : 0, 1, _textController.text);
      _textController.clear();
    } else {
      appendToCSV(widget.isOn ? 1 : 0, 0, _textController.text);
      _textController.clear();
    }
    Navigator.pop(context);
  }

  Future<void> _loadCSV() async {
    final directory = await getApplicationDocumentsDirectory();
    final filePath = "${directory.path}/db.csv";

    // Check if the file exists, if not, create an empty CSV file
    if (await File(filePath).exists()) {
      final raw = await File(filePath).readAsString();
      List<List<dynamic>> listData = const CsvToListConverter().convert(raw);
      setState(() {
        data = listData;
      });
    } else {
      await File(filePath).writeAsString('');
    }
  }

  Future<void> appendToCSV(int index, int safe, String text) async {
    final directory = await getApplicationDocumentsDirectory();
    final filePath = "${directory.path}/db.csv";

    // Read existing CSV data
    String raw;
    try {
      raw = await File(filePath).readAsString();
    } catch (e) {
      print("Error reading CSV file: $e");
      return;
    }

    List<List<dynamic>> csvTable = const CsvToListConverter().convert(raw);

    // Generate new row
    print('storing value is ${safe}');
    List<dynamic> newRow = [
      1,
      'txt',
      text,
      safe,
    ];

    // Append the new row
    csvTable.add(newRow);

    // Convert the updated data to CSV format
    String updatedCsvData = ListToCsvConverter().convert(csvTable);

    // Write the updated CSV data back to the file
    try {
      await File(filePath).writeAsString(updatedCsvData);
      print("CSV file updated successfully.");
    } catch (e) {
      print("Error writing CSV file: $e");
    }
  }

  Stream<List<List<dynamic>>> _csvStream() async* {
    final directory = await getApplicationDocumentsDirectory();
    final filePath = "${directory.path}/db.csv";

    while (true) {
      await Future.delayed(Duration(seconds: 1));

      try {
        final raw = await File(filePath).readAsString();
        List<List<dynamic>> listData = const CsvToListConverter().convert(raw);
        yield listData;
      } catch (e) {
        print("Error reading CSV file: $e");
        yield [];
      }
    }
  }
}

class ChatMessage extends StatelessWidget {
  final String text;
  final bool isSender;
  final bool isSafe;

  ChatMessage(
      {required this.text, required this.isSender, required this.isSafe});

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.symmetric(vertical: 10, horizontal: 16),
      alignment: isSender ? Alignment.centerRight : Alignment.centerLeft,
      child: Row(
        mainAxisAlignment:
            isSender ? MainAxisAlignment.end : MainAxisAlignment.start,
        children: [
          isSender
              ? !isSafe
                  ? Image(
                      image: AssetImage('assets/warning.png'),
                    )
                  : Image(
                      image: AssetImage('assets/shield.png'),
                    )
              : Container(),
          Container(
            padding: EdgeInsets.all(10),
            decoration: BoxDecoration(
              color: isSender ? Colors.blue : Colors.grey[300],
              borderRadius: BorderRadius.circular(8),
            ),
            child: Container(
              width: 300,
              child: Text(
                text,
                style: TextStyle(fontSize: 16),
              ),
            ),
          ),
          !isSender
              ? isSafe
                  ? Image(
                      image: AssetImage('assets/warning.png'),
                    )
                  : Container()
              : Container(),
        ],
      ),
    );
  }
}

class CommentDialog extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Dialog(
      backgroundColor: Colors.transparent,
      elevation: 0,
      child: Container(
        padding: EdgeInsets.all(16.0),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(8.0),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16.0),
            Text('wait'),
          ],
        ),
      ),
    );
  }
}
